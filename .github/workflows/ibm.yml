# This workflow will build a docker container, publish it to IBM Container Registry, and deploy it to IKS when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains a Dockerfile
# 2. Setup secrets in your repository by going to settings: Create ICR_NAMESPACE and IBM_CLOUD_API_KEY
# 3. Change the values for the IBM_CLOUD_REGION, REGISTRY_HOSTNAME, IMAGE_NAME, IKS_CLUSTER, DEPLOYMENT_NAME, and PORT

name: Build and Deploy to IKS

on:
  push:
    branches: [ "master" ]

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
  IBM_CLOUD_REGION: in-che
  ICR_NAMESPACE: ${{ secrets.ICR_NAMESPACE }}
  REGISTRY_HOSTNAME: icr.io
  IMAGE_NAME: iks-test
  IKS_CLUSTER: cdm8psef0s018qv50fv0
  DEPLOYMENT_NAME: iks-test
  PORT: 5000
  DB_API_UID: ${{ secrets.DB_API_UID }}
  DB_API_PWD: ${{ secrets.DB_API_PWD }}
  DB_API_HOST: ${{ secrets.DB_API_HOST }}
  DB_API_PORT: ${{ secrets.DB_API_PORT }}
  SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}


jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    # Download and Install IBM Cloud CLI
    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false
        ibmcloud plugin install -f kubernetes-service
        ibmcloud plugin install -f container-registry

    # Authenticate with IBM Cloud CLI
    - name: Authenticate with IBM Cloud CLI
      run: |
        ibmcloud login --apikey "${IBM_CLOUD_API_KEY}"  -r "${IBM_CLOUD_REGION}"
        ibmcloud cr login

    # Build the Docker image
    - name: Build with Docker
      run: |
        docker build -t "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$IMAGE_NAME":latest .
        ibmcloud cr login

    # Push the image to IBM Container Registry
    - name: Push the image to ICR
      run: |
        ibmcloud cr login
        ibmcloud cr image-rm "$ICR_NAMESPACE"/"$IMAGE_NAME"
        docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:latest
        

    # Deploy the Docker image to the IKS cluster
    - name: Deploy to IKS
      run: |
        ibmcloud ks cluster config --cluster $IKS_CLUSTER
        kubectl config current-context
        kubectl delete deploy $DEPLOYMENT_NAME
        kubectl create deployment $DEPLOYMENT_NAME --image=$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:latest
        kubectl delete svc $DEPLOYMENT_NAME 
        kubectl expose deployment/$IMAGE_NAME --type="NodePort" --port 5000
        kubectl set env deployment/$DEPLOYMENT_NAME  DB_API_UID=${{ secrets.DB_API_UID }}
        kubectl set env deployment/$DEPLOYMENT_NAME  DB_API_PWD=${{ secrets.DB_API_PWD }}
        kubectl set env deployment/$DEPLOYMENT_NAME DB_API_HOST=${{ secrets.DB_API_HOST }}
        kubectl set env deployment/$DEPLOYMENT_NAME DB_API_PORT=${{ secrets.DB_API_PORT }}
        kubectl set env deployment/$DEPLOYMENT_NAME  SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
        kubectl describe services/$IMAGE_NAME
        ibmcloud cs workers --cluster $IKS_CLUSTER
        

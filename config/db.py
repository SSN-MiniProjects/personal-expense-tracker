import logging
import os
from typing import Tuple

import psycopg2
from psycopg2 import ProgrammingError
from psycopg2.extras import DictCursor

db_name = os.environ.get("DB_NAME")
username = os.environ.get("DB_USERNAME")
password = os.environ.get("DB_PASSWORD")
host = os.environ.get("DB_HOST")
port = os.environ.get("DB_PORT")

conn = psycopg2.connect(
    dbname=db_name,
    user=username,
    password=password,
    host=host,
    port=port,
)

logging.basicConfig(level=logging.INFO)

def get_result(query: str, param: Tuple = None):
    with conn.cursor() as cursor:
        if param is None:
            cursor.execute(query)
        else:
            cursor.execute(query, param)
        try:
            return cursor.fetchall() if cursor.rowcount >= 0 else []
        except ProgrammingError as e:
            logging.error("Error getting result from db {query} with param: {param}".format(query=query, param=param))
            logging.error(e)

def get_result_dict(query: str, param: Tuple = None):

    with conn.cursor(cursor_factory=DictCursor) as cursor:
        if param is None:
            cursor.execute(query)
        else:
            cursor.execute(query, param)
        try:
            return cursor.fetchall()
        except ProgrammingError:
            logging.error("Error getting result from db {query} with param: {param}".format(query=query, param=param))



def init_db():
    createUserCredentials = "CREATE TABLE IF NOT EXISTS user_credentials (\
        id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,\
        email VARCHAR(50) NOT NULL,\
        password VARCHAR(100) NOT NULL);"

    createUserProfile = "CREATE TABLE IF NOT EXISTS user_profiles (\
        id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,\
        login_id INT NOT NULL,\
        name VARCHAR(30),\
        budget INT DEFAULT 0,\
        phone VARCHAR(30),\
        profession VARCHAR(30),\
        alert BOOLEAN DEFAULT FALSE,\
        FOREIGN KEY (login_id) REFERENCES USER_CREDENTIALS(id) ON DELETE CASCADE);"

    createUserEvents = "CREATE TABLE IF NOT EXISTS user_events(\
            id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,\
            login_id INT NOT NULL,\
            name VARCHAR(30),\
            budget INT DEFAULT 0,\
            FOREIGN KEY (login_id) REFERENCES USER_CREDENTIALS(id) ON DELETE CASCADE);"

    createUserTransactions = "CREATE TABLE IF NOT EXISTS user_transactions (\
        id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,\
        login_id INT NOT NULL,\
        transaction NUMERIC NOT NULL,\
        mode VARCHAR(20),\
        category VARCHAR(20),\
        event_id INT,\
        datestamp DATE,\
        note VARCHAR(50),\
        FOREIGN KEY (login_id) REFERENCES USER_CREDENTIALS(id) ON DELETE CASCADE,\
        FOREIGN KEY (event_id) REFERENCES USER_EVENTS(id) ON DELETE CASCADE);"

    get_result(createUserCredentials)
    get_result(createUserProfile)
    get_result(createUserEvents)
    get_result(createUserTransactions)


class TransactionFormChoices:
    MODE = ["Online", "Credit Card", "Cash"]
    CATEGORY = ["Food", "Health", "Transport", "Shopping", "Entertainment", "Bills", "Debt Payment", "Other"]

import os
from typing import Tuple

import psycopg2
from psycopg2 import ProgrammingError


def get_result(query: str, param: Tuple = None):
    conn = psycopg2.connect(
        dbname=os.getenv("DB_NAME"),
        user=os.getenv("DB_USER"),
        password=os.getenv("DB_PASS"),
        host=os.getenv("DB_HOST"),
        port=os.getenv("DB_PORT")
    )
    cursor = conn.cursor()
    res = None
    if param is None:
        cursor.execute(query)
    else:
        cursor.execute(query, param)

    try:
        res = cursor.fetchall()
    except ProgrammingError:
        pass
    conn.commit()
    cursor.close()
    return res


def init_db():
    createUserCredentials = "CREATE TABLE IF NOT EXISTS user_credentials (\
        id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,\
        email VARCHAR(50) NOT NULL,\
        password VARCHAR(100) NOT NULL);"

    createUserProfile = "CREATE TABLE IF NOT EXISTS user_profiles (\
        id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,\
        login_id INT NOT NULL,\
        name VARCHAR(30),\
        budget INT DEFAULT 0,\
        phone VARCHAR(30),\
        profession VARCHAR(30),\
        alert BOOLEAN DEFAULT FALSE,\
        FOREIGN KEY (login_id) REFERENCES USER_CREDENTIALS(id) ON DELETE CASCADE);"

    createUserEvents = "CREATE TABLE IF NOT EXISTS user_events(\
            id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,\
            login_id INT NOT NULL,\
            name VARCHAR(30),\
            budget INT DEFAULT 0,\
            FOREIGN KEY (login_id) REFERENCES USER_CREDENTIALS(id) ON DELETE CASCADE);"

    createUserTransactions = "CREATE TABLE IF NOT EXISTS user_transactions (\
        id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,\
        login_id INT NOT NULL,\
        transaction NUMERIC NOT NULL,\
        mode VARCHAR(20),\
        category VARCHAR(20),\
        event_id INT,\
        datestamp DATE,\
        note VARCHAR(50),\
        FOREIGN KEY (login_id) REFERENCES USER_CREDENTIALS(id) ON DELETE CASCADE,\
        FOREIGN KEY (event_id) REFERENCES USER_EVENTS(id) ON DELETE CASCADE);"

    get_result(createUserCredentials)
    get_result(createUserProfile)
    get_result(createUserEvents)
    get_result(createUserTransactions)


class TransactionFormChoices:
    MODE = ["Online", "Credit Card", "Cash"]
    CATEGORY = ["Food", "Health", "Transport", "Shopping", "Entertainment", "Bills", "Debt Payment", "Other"]

import ibm_db
import os
import datetime
## get the IBM db2 credentials from your IBM cloud
# driver and protocol remains


dsn_hostname = os.environ.get('DB_API_HOST') 
dsn_uid = os.environ.get('DB_API_UID')
dsn_pwd = os.environ.get('DB_API_PWD') 
dsn_driver =  "{IBM DB2 ODBC DRIVER}"
dsn_database = "bludb"
dsn_port = os.environ.get('DB_API_PORT')
dsn_protocol = "TCPIP"

dsn = (
    "DRIVER={0};"
    "DATABASE={1};"
    "HOSTNAME={2};"
    "PORT={3};"
    "PROTOCOL={4};"
    "UID={5};"
    "PWD={6};"
    "SECURITY=SSL"
).format(dsn_driver, dsn_database, dsn_hostname, dsn_port, dsn_protocol, dsn_uid, dsn_pwd)


def connect_db():
    conn = ibm_db.connect(dsn,"","")
    return conn

def initialise():
    conn = connect_db()
    createUserCredentials = "CREATE TABLE user_credentials (\
        id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,\
        email VARCHAR(50) NOT NULL,\
        password VARCHAR(20) NOT NULL);"

    createUserProfile = "CREATE TABLE user_profiles (\
        id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,\
        login_id INT NOT NULL,\
        name VARCHAR(30),\
        budget INT DEFAULT 0,\
        total_spent INT DEFAULT 0,\
        phone VARCHAR(30),\
        profession VARCHAR(30),\
        alert BOOLEAN DEFAULT FALSE,\
        FOREIGN KEY (login_id) REFERENCES USER_CREDENTIALS(id) ON DELETE CASCADE);"
    createUserTransactions = "CREATE TABLE user_transactions (\
        id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,\
        login_id INT NOT NULL,\
        transaction NUMERIC NOT NULL,\
        mode VARCHAR(10),\
        category VARCHAR(20),\
        datestamp DATE,\
        note VARCHAR(50),\
        FOREIGN KEY (login_id) REFERENCES USER_CREDENTIALS(id) ON DELETE CASCADE);"
    
    ibm_db.exec_immediate(conn, createUserCredentials)
    ibm_db.exec_immediate(conn, createUserProfile)
    ibm_db.exec_immediate(conn, createUserTransactions)
    ibm_db.close(conn)

def fetchResults(res): # Returns a list of dictionaries
    result_set = []
    d = ibm_db.fetch_assoc(res)
    while  d != False:
        result_set.append(d)
        d = ibm_db.fetch_assoc(res)
    return result_set

# def fetchAllUsers():
#     conn = connect_db()
#     query = f'SELECT * FROM user'
#     res = ibm_db.exec_immediate(conn, query)
#     result_set = fetchResults(res)
#     ibm_db.close(conn)
#     return result_set

def fetchUserById(id):
    conn = connect_db()
    query = 'SELECT * FROM user_credentials WHERE id = ?'
    stmt = ibm_db.prepare(conn, query)
    param = (id,)
    ibm_db.execute(stmt,param)
    result_set = fetchResults(stmt)
    ibm_db.close(conn)
    return result_set

def insert_user_credential(email, username):
    conn = connect_db()
    query = 'INSERT INTO user_credentials (email, password) VALUES (?, ?)'
    stmt = ibm_db.prepare(conn, query)
    param = (email, username)
    res = ibm_db.execute(stmt,param)
    return res

def insert_user_profile(login_id): #update
    conn = connect_db()
    query = 'INSERT INTO user_profiles (login_id) VALUES (?)'
    stmt = ibm_db.prepare(conn, query)
    param = (login_id,)
    res = ibm_db.execute(stmt, param)
    return res


def fetchUserByEmail(email): 
    conn = connect_db()
    query = 'SELECT ID,EMAIL,PASSWORD FROM user_credentials WHERE email = ?'
    stmt = ibm_db.prepare(conn, query)
    param = (email,)
    ibm_db.execute(stmt,param)
    result_set = fetchResults(stmt)
    ibm_db.close(conn)
    return result_set

def insert_user_transaction(email,transaction,mode,category,datestamp,note):
    conn = connect_db()
    login_id = fetchUserByEmail(email)[0]['ID']
    query = 'INSERT INTO user_transactions (login_id,transaction,mode,category,datestamp,note) VALUES (?,?,?,?,?,?)'
    stmt = ibm_db.prepare(conn, query)
    param = (login_id,transaction,mode,category,datestamp,note)
    res = ibm_db.execute(stmt, param)
    query = 'update user_profiles set total_spent=total_spent+? where login_id=?;'
    stmt = ibm_db.prepare(conn, query)
    param = (transaction,login_id,)
    res = ibm_db.execute(stmt, param)
    return res

def fetch_user_transactions(email):
    conn = connect_db()
    login_id = fetchUserByEmail(email)[0]['ID']
    query = 'SELECT * FROM user_transactions WHERE login_id = ?'
    stmt = ibm_db.prepare(conn, query)
    param = (login_id,)
    ibm_db.execute(stmt,param)
    result_set = fetchResults(stmt)
    ibm_db.close(conn)
    return result_set

def update_password(username, password):
    conn = connect_db()
    query = 'UPDATE user_credentials set password = ? where username = ?'
    stmt = ibm_db.prepare(conn, query)
    param = (password, username)
    res = ibm_db.execute(stmt,param)
    return res

def global_view_query(query,email=""):
    conn = connect_db()
    query = query
    if(email != ""):
        login_id = fetchUserByEmail(email)
        login_id=login_id[0]['ID']
        query = query+ 'WHERE login_id = ?'
        stmt = ibm_db.prepare(conn, query)
        param = (login_id,)
        ibm_db.execute(stmt,param)
    else:
        stmt = ibm_db.prepare(conn, query)
        ibm_db.execute(stmt)
    result_set = fetchResults(stmt)
    ibm_db.close(conn)
    return result_set
# insert_user_transaction("karthikraja19048@cse.ssn.edu.in",1343.54,"online","food","2022-12-20","at the airport to shillong")

def update_user_customize(email, name, budget, phone, profession, alert):
    conn = connect_db()
    login_id = fetchUserByEmail(email)[0]['ID']
    query = 'UPDATE user_profiles set name=?, budget=?, phone=?, profession=?, alert=? where login_id=?'
    stmt = ibm_db.prepare(conn, query)
    param = (name, budget, phone, profession, alert, login_id)
    res = ibm_db.execute(stmt, param)
    return res
def get_month_expense(email,reqd_month_datestr): #use format yyyy-mm-dd
    conn = connect_db()
    login_id = fetchUserByEmail(email)[0]['ID']
    query = ''' 
    select SUM(transaction) as  "TRANSACTION",DAY(datestamp) as "DT" from user_transactions  
    where login_id = ? and datestamp >=THIS_MONTH(?) and datestamp < THIS_MONTH(ADD_MONTHS(LAST_DAY(?), 1))  
    group by datestamp;'''
    stmt = ibm_db.prepare(conn, query)
    param = (login_id,reqd_month_datestr,reqd_month_datestr,)
    ibm_db.execute(stmt,param)
    result_set = fetchResults(stmt)
    ibm_db.close(conn)
    return result_set
def get_category_month_expense(email,reqd_month_datestr): #use format yyyy-mm-dd
    conn = connect_db()
    login_id = fetchUserByEmail(email)[0]['ID']
    query = ''' select SUM(transaction) as "TRANSACTION",category from user_transactions  
    where login_id = ? and datestamp >=THIS_MONTH(?) and datestamp < THIS_MONTH(ADD_MONTHS(LAST_DAY(?), 1))  
    group by category;'''
    stmt = ibm_db.prepare(conn, query)
    param = (login_id,reqd_month_datestr,reqd_month_datestr,)
    ibm_db.execute(stmt,param)
    result_set = fetchResults(stmt)
    ibm_db.close(conn)
    return result_set
def get_annual_expense(email,reqd_year_datestr): #use format yyyy-mm-dd
    conn = connect_db()
    login_id = fetchUserByEmail(email)[0]['ID']
    query = ''' select SUM(transaction) as "TRANSACTION" , MONTH(datestamp) AS "MT" 
    from user_transactions  
    where login_id = ? and datestamp >=THIS_YEAR(?) and datestamp < THIS_YEAR(ADD_YEARS(LAST_DAY(?), 1)) 
    group by MONTH(datestamp);'''
    stmt = ibm_db.prepare(conn, query)
    param = (login_id,reqd_year_datestr,reqd_year_datestr,)
    ibm_db.execute(stmt,param)
    result_set = fetchResults(stmt)
    ibm_db.close(conn)
    return result_set

